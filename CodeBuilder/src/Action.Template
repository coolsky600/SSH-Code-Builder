package cn.ibm.com.action;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.annotation.Resource;
import cn.ibm.com.common.RichActionSupport;
import cn.ibm.com.po.##ClassName;
import cn.ibm.com.service.##ClassNameService;
import cn.ibm.com.utils.BeanMapConvertor;
import com.opensymphony.xwork2.ModelDriven;

public class ##ClassNameAction extends RichActionSupport implements ModelDriven<##ClassName>{

	private static final long serialVersionUID = 1L;
	
	private ##ClassName ##TableName = new ##ClassName(); 

	@Resource(name="##TableNameService")
	##ClassNameService service;
	
	public String insert(){

		if (true == service.insert##ClassName(##TableName))
			dataMap.put(ERRORMSG, SUCCEED);
		else
			dataMap.put(ERRORMSG, FAILED);
		
		return "success";
	}
	
	public String update(){

		if (true == service.update##ClassName(##TableName))
			dataMap.put(ERRORMSG, SUCCEED);
		else
			dataMap.put(ERRORMSG, FAILED);
		
		return "success";
	}

	public String delete(){
		
		if (true == service.deleteById(##TableName.getId()))
			dataMap.put(ERRORMSG, SUCCEED);
		else
			dataMap.put(ERRORMSG, FAILED);
		
		return "success";
	}
	
	public String findByID(){
		 
		##ClassName result = service.findById(##TableName.getId());
        Map<String,String> m = BeanMapConvertor.convertBean(result);
        dataMap.put("##TableName", m);  
        return SUCCESS;  
	} 
	
	public String findByPage(){
		 
	        List<##ClassName> ##TableNameList = service.findByPage(page,rows);
	        ArrayList<Map<String,String>> al = new ArrayList<Map<String,String>>();
	        
	        for(##ClassName ##TableName : ##TableNameList){
	        	Map<String,String> m = BeanMapConvertor.convertBean(##TableName);
	            al.add(m);  
	        }   
   
	        dataMap.put("total", service.getTotalCount());  
	        dataMap.put("rows", al);  
	        return SUCCESS;  
	} 

	@Override
	public ##ClassName getModel() {
		return ##TableName;
	}

}
